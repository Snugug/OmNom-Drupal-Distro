<?php

/**
 * @file
 * Provide integration with Colors module for FullCalendar.
 */

/**
 * Implements hook_menu().
 */
function fullcalendar_colors_menu() {
  $items = array();

  $base = array(
    'file' => 'fullcalendar_colors.admin.inc',
    'file path' => drupal_get_path('module', 'fullcalendar_colors') . '/includes',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/user-interface/fullcalendar/colors'] = array(
    'title' => 'Colors',
    'description' => 'Adjust FullCalendar color settings for entities.',
    'page arguments' => array('fullcalendar_colors_admin_node_type_settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  ) + $base;

  $items['admin/config/user-interface/fullcalendar/colors/node'] = array(
    'title' => 'Node type',
    'page arguments' => array('fullcalendar_colors_admin_node_type_settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  if (module_exists('taxonomy')) {
    $items['admin/config/user-interface/fullcalendar/colors/taxonomy'] = array(
      'title' => 'Taxonomy',
      'page arguments' => array('fullcalendar_colors_admin_taxonomy_settings'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -8,
    ) + $base;
  }

  $items['admin/config/user-interface/fullcalendar/colors/user'] = array(
    'title' => 'User role',
    'page arguments' => array('fullcalendar_colors_admin_user_role_settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  ) + $base;

  if (module_exists('og')) {
    $items['admin/config/user-interface/fullcalendar/colors/og'] = array(
      'title' => 'Organic groups',
      'page arguments' => array('fullcalendar_colors_admin_og_settings'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -2,
    ) + $base;
  }

  $items['admin/config/user-interface/fullcalendar/colors/settings'] = array(
    'title' => 'Settings',
    'page arguments' => array('fullcalendar_colors_admin_settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  ) + $base;

  return $items;
}

/**
 * Implements hook_help().
 */
function fullcalendar_colors_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fullcalendar_colors':
      return '<p>' . t('You can configure colors for your fullcalendar events based on taxonomy terms, node types, etc. on the <a href="@link">FullCalendar Colors administration page</a>.', array('@link' => '/admin/config/user-interface/fullcalendar/colors')) . '</p>';
      break;
  }
}

/**
 * Includes all FullCalendar Colors API plugins.
 */
function fullcalendar_colors_include_api() {
  ctools_include('plugins');
  return ctools_plugin_api_include('fullcalendar_colors', 'fullcalendar_colors', fullcalendar_colors_api_version(), fullcalendar_colors_api_minimum_version());
}

/**
 * Implements hook_ctools_plugin_api_hook_name().
 */
function fullcalendar_colors_ctools_plugin_api_hook_name() {
  return 'fullcalendar_colors_api';
}

/**
 * Implements hook_fullcalendar_colors_api().
 */
function fullcalendar_colors_fullcalendar_colors_api() {
  return array(
    'api' => fullcalendar_colors_api_version(),
    'path' => drupal_get_path('module', 'fullcalendar_colors') . '/modules',
  );
}

/**
 * Declares the current FullCalendar Colors API version.
 */
function fullcalendar_colors_api_version() {
  return '1';
}

/**
 * Declares the minimum FullCalendar Colors API version.
 */
function fullcalendar_colors_api_minimum_version() {
  return '1';
}

/**
 * Generates css classes for coloring.
 */
function fullcalendar_colors_generate_css($entity, $classes) {

  // Give the colors module the oportunity to add even more classes, these
  // classes will only be used to genereate CSS.
  $hook = 'fullcalendar_colors_css_classes';
  foreach (module_implements($hook) as $module) {
    // Fetch all the class names.
    $function = $module . '_' . $hook;
    $class_names = $function($entity);
    foreach ($class_names as $class_name) {
      $classes[$module][$class_name] = $class_name;
    }
  }

  // Filter out the $classes passed by FullCalendar that don't have color
  // configuration in the database.
  foreach ($classes as $module => $class_array) {
    foreach ($class_array as $class) {
      if (!colors_colors_exist($class)) {
        unset($classes[$module][$class]);
      }
    }
  }

  // All the classes that are left are considered to be valid color selectors.
  fullcalendar_colors_process_selectors($classes);
}

/**
 * Implements hook_colors_build_selector().
 */
function fullcalendar_colors_colors_build_selector($class) {
  $selector = ' .' . $class . ',';
  $selector .= ' .' . $class . ' .fc-event-skin,';
  $selector .= ' .' . $class . ' .fc-event-time,';
  $selector .= ' .' . $class . ' a';
  return $selector;
}

/**
 * Processes selectors.
 *
 * @param array $selectors
 *   Selector that is being processed.
 * @param bool $reset
 *   Boolean to print the CSS and reset the array.
 */
function fullcalendar_colors_process_selectors($selectors = array(), $reset = FALSE) {
  $fullcalendar_selectors = &drupal_static(__FUNCTION__, array());
  if ($reset) {
    // Set the default selector first.
    $unique_selectors = array('fullcalendar_colors_default');

    // Rearrange the selector processing order.
    fullcalendar_colors_rearrange_selectors($fullcalendar_selectors);

    // Add the other selectors.
    foreach ($fullcalendar_selectors as $class) {
      foreach ($class as $class_name => $selector) {
        if (is_array($selector)) {
          $selector = array_unique($selector);
          $selector = reset($selector);
        }
        $unique_selectors[] = $selector;
      }
    }

    // Tell the colors module which selectors to color.
    colors_insert_css_from_selectors($unique_selectors, 'fullcalendar_colors');
    drupal_static_reset(__FUNCTION__);
  }
  else {
    $fullcalendar_selectors = array_merge_recursive($selectors, $fullcalendar_selectors);
  }
}

/**
 * Rearranges the selectors according to the weights.
 *
 * @param array $selectors
 *   The selectors that needs to be rearranged.
 */
function fullcalendar_colors_rearrange_selectors(&$selectors) {
  $modules = array();
  if (variable_get('fullcalendar_colors_process_order_enabled', FALSE)) {
    $hook = 'fullcalendar_colors_class_names';
    foreach (module_implements($hook) as $module) {
      $modules[$module] = variable_get('fullcalendar_colors_weight_' . $module, 0);
    }

    // Filter modules that didn't provide any CSS.
    $modules = array_intersect_key($modules, $selectors);

    // Sort the modules by weight.
    asort($modules);
  }

  // Reorder the CSS processing.
  $selectors = array_merge($modules, $selectors);
}

/**
 * Implements hook_theme().
 */
function fullcalendar_colors_theme() {
  return array(
    'fullcalendar_colors_admin_settings' => array(
      'render element' => 'form',
      'file' => 'includes/fullcalendar_colors.admin.inc',
    ),
  );
}

if (!function_exists('user_fullcalendar_colors_api')) {
  function user_fullcalendar_colors_api() {
    return fullcalendar_colors_fullcalendar_colors_api();
  }
}

if (!function_exists('node_fullcalendar_colors_api')) {
  function node_fullcalendar_colors_api() {
    return fullcalendar_colors_fullcalendar_colors_api();
  }
}

if (!function_exists('taxonomy_fullcalendar_colors_api')) {
  function taxonomy_fullcalendar_colors_api() {
    return fullcalendar_colors_fullcalendar_colors_api();
  }
}

if (!function_exists('og_fullcalendar_colors_api')) {
  function og_fullcalendar_colors_api() {
    return fullcalendar_colors_fullcalendar_colors_api();
  }
}

/**
 * Inserts or updates a FullCalendar color configuration.
 *
 * @param array $classes
 *   CSS class you would like to insert or update.
 * @param string $background
 *   Background color used for the color configuration.
 * @param string $border
 *   Border color used for the color configuration.
 * @param string $text
 *   Text color used for the color configuration.
 */
function fullcalendar_colors_set_color($classes, $background = '#000000', $border = '#000000', $text = '#ffffff') {
  // @TODO Remove this hack once borders have their own UI.
  $border = $background;

  $colors = array(
    'background' => $background,
    'border' => $border,
    'text' => $text,
  );
  colors_set_colors($classes, $colors, 'fullcalendar_colors');
}
